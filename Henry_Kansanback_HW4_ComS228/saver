private int countSib(EntryNode<K, V> v)
	{
		EntryNode<K, V> o = null;
		int p = 0;
		if(v.next() != null)
		{
			o = v.next();
			p = 1;
		}
		while(o.next() != null)
		{
			o = o.next();
			p++;
		}
		return p;
	}
	private int countChil(EntryNode<K, V> v)
	{
		EntryNode<K, V> o = null;
		int p = 0;
		if(v.child() != null)
		{
			o = v.child();
			p = 1;
		}
		while(o.next() != null)
		{
			o = o.next();
			p++;
		}
		return p;
	}
	
		private int show(int in)
	{
		if(in <= 0)
		{
			System.out.println(root.key().toString() + " -> " + root.value().toString());
			show(++in);
			return 0;
		}
		Node v = root;
		int o = 0;
		if(in > 0)
		{
			System.out.println("");
			for(o = 0; o < in; o++)
			{
				System.out.print("\t");
				if(v.child != null)
				{
					v = v.child;
				}
			}
			System.out.println(v.key.toString() + " -> " + v.value.toString());
			if(v.child != null)
			{
				show(in + 1);
			}
			else if(v.child == null && v.next != null)
			{
				
			}
			
		}
		return --in;
	}